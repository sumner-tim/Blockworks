WITH
-- 1. Retrieve blocks to get time and block number
blocks AS (
    SELECT 
        time,
        cast("number" as uint256) AS block
    FROM ethereum.blocks
    WHERE "number" > 13578840
),

-- 2. Pull relevant data for rETH from multiple sources
reth_evt_preatlas AS (
    SELECT
        evt_block_time,
        evt_block_number,
        block as referenceBlock,
        totalEth,
        rethSupply
    FROM rocketnetwork_ethereum.RocketNetworkBalances_evt_BalancesUpdated
    WHERE evt_block_time >= cast('2022-07-15 00:00' as timestamp)
    ORDER BY referenceBlock ASC
),

-- 3. Combine all rETH events data into a unified table
reth_evt_unified AS (
    SELECT * FROM reth_evt_preatlas
    ORDER BY referenceBlock ASC
),

-- 4. Join blocks and rETH event data to add reference times
reth_evt_unifiedwithreftime AS (
    SELECT
        evt_block_time,
        evt_block_number,
        to_unixtime(time) as referenceTime,
        totalEth,
        rethSupply
    FROM blocks b
    JOIN reth_evt_unified r
    ON b.block = r.referenceBlock
),

-- 5. Calculate APY based on the change in rETH peg over time
reth_evt AS (
    SELECT
        evt_block_time,
        evt_block_number,
        referenceTime,
        referenceTime - NULLIF(coalesce(lag(referenceTime) over (order by referenceTime), 0), 0) as timeSinceLastUpdate,
        totalEth,
        cast(totalEth as double) / cast(rethSupply as double) AS eth_reth_peg
    FROM reth_evt_unifiedwithreftime
),

-- 6. Calculate APY by annualizing the growth rate in eth_reth_peg
reth AS (
    SELECT
        evt_block_time,
        evt_block_number,
        referenceTime,
        eth_reth_peg,
        100 * (31536000 / cast(timeSinceLastUpdate as double)) * 
        (eth_reth_peg / NULLIF(coalesce(lag(eth_reth_peg) over (order by referenceTime), 0), 0) - 1) as apy
    FROM reth_evt
),

-- 7. Rank APY values and assign row numbers for trimming
reth_ranked AS (
    SELECT
        evt_block_time AS time,
        apy,
        ROW_NUMBER() OVER (ORDER BY apy ASC) AS row_asc,
        ROW_NUMBER() OVER (ORDER BY apy DESC) AS row_desc,
        COUNT(*) OVER () AS total_rows
    FROM reth
),

-- 8. Filter out top and bottom 10% APY values based on row numbers
reth_trimmed AS (
    SELECT
        time,
        apy
    FROM reth_ranked
    WHERE row_asc > 0.1 * total_rows
      AND row_desc > 0.1 * total_rows
),

-- 9. Calculate the 10% trimmed average of the remaining APY values
reth_trimmed_avg AS (
    SELECT
        AVG(apy) AS "rETH 10% Trimmed Average APY"
    FROM reth_trimmed
)

-- 10. Output the final result
SELECT
    "rETH 10% Trimmed Average APY"
FROM reth_trimmed_avg
